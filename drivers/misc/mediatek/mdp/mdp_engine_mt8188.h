/* SPDX-License-Identifier: GPL-2.0 */
/*
 * Copyright (c) 2020 MediaTek Inc.
 */

#ifndef __MDP_ENGINE_H__
#define __MDP_ENGINE_H__

enum CMDQ_ENG_ENUM {
	/* ISP */
	CMDQ_ENG_WPEI = 0,
	CMDQ_ENG_WPEO,		   /*  1 */
	/* MDP */
	CMDQ_ENG_MDP_CAMIN,        /*  2 */
	CMDQ_ENG_MDP_RDMA0,        /*  3 */
	CMDQ_ENG_MDP_RDMA2,        /*  4 */
	CMDQ_ENG_MDP_RDMA3,        /*  5 */
	CMDQ_ENG_MDP_FG0,          /*  6 */
	CMDQ_ENG_MDP_FG2,          /*  7 */
	CMDQ_ENG_MDP_FG3,          /*  8 */
	CMDQ_ENG_MDP_TO_SVPP2MOUT, /*  9 */
	CMDQ_ENG_MDP_TO_SVPP3MOUT, /*  10 */
	CMDQ_ENG_MDP_TO_WARP0MOUT, /*  11 */
	CMDQ_ENG_MDP_VPP0_SOUT,    /*  12 */
	CMDQ_ENG_MDP_VPP1_SOUT,    /*  13 */
	CMDQ_ENG_MDP_PQ0_SOUT,     /*  14 */
	CMDQ_ENG_MDP_HDR0,         /*  15 */
	CMDQ_ENG_MDP_HDR2,         /*  16 */
	CMDQ_ENG_MDP_HDR3,         /*  17 */
	CMDQ_ENG_MDP_AAL0,         /*  18 */
	CMDQ_ENG_MDP_AAL2,         /*  19 */
	CMDQ_ENG_MDP_AAL3,         /*  20 */
	CMDQ_ENG_MDP_RSZ0,         /*  21 */
	CMDQ_ENG_MDP_RSZ2,         /*  22 */
	CMDQ_ENG_MDP_RSZ3,         /*  23 */
	CMDQ_ENG_MDP_TDSHP0,       /*  24 */
	CMDQ_ENG_MDP_TDSHP2,       /*  25 */
	CMDQ_ENG_MDP_TDSHP3,       /*  26 */
	CMDQ_ENG_MDP_COLOR0,       /*  27 */
	CMDQ_ENG_MDP_COLOR2,       /*  28 */
	CMDQ_ENG_MDP_COLOR3,       /*  39 */
	CMDQ_ENG_MDP_OVL0,         /*  30 */
	CMDQ_ENG_MDP_PAD0,         /*  31 */
	CMDQ_ENG_MDP_PAD2,         /*  32 */
	CMDQ_ENG_MDP_PAD3,         /*  33 */
	CMDQ_ENG_MDP_TCC0,         /*  34 */
	CMDQ_ENG_MDP_WROT0,        /*  35 */
	CMDQ_ENG_MDP_WROT2,        /*  36 */
	CMDQ_ENG_MDP_WROT3,        /*  37 */

	CMDQ_ENG_INORDER,			/*  38 */

	/* fake engines */
	CMDQ_ENG_SPLIT = 63,
	CMDQ_ENG_MDP_RDMA1 = 63,
	CMDQ_ENG_MDP_RSZ1 = 63,
	CMDQ_ENG_MDP_TDSHP1 = 63,
	CMDQ_ENG_MDP_WROT1 = 63,
	CMDQ_ENG_ISP_IMGI   = 63,  /*  63 */
	CMDQ_ENG_ISP_IMGI2  = 63,  /*  63 */
	CMDQ_ENG_ISP_IMG2O  = 63,  /*  63 */
	CMDQ_ENG_ISP_IMG2O2 = 63,  /*  63 */
	CMDQ_ENG_MDP_WDMA   = 63,  /*  63 */
	CMDQ_ENG_MAX = CMDQ_MAX_ENGINE_COUNT /* ALWAYS keep at the end */
};

#define CMDQ_ENG_WPE_GROUP_BITS	((1LL << CMDQ_ENG_WPEI) |	\
				 (1LL << CMDQ_ENG_WPEO))

#define CMDQ_ENG_ISP_GROUP_BITS	(0LL)

#define CMDQ_ENG_MDP_GROUP_BITS	((1LL << CMDQ_ENG_MDP_CAMIN) |	\
				 (1LL << CMDQ_ENG_MDP_RDMA0) |	\
				 (1LL << CMDQ_ENG_MDP_RDMA2) |	\
				 (1LL << CMDQ_ENG_MDP_RDMA3) |	\
				 (1LL << CMDQ_ENG_MDP_FG0) |	\
				 (1LL << CMDQ_ENG_MDP_FG2) |	\
				 (1LL << CMDQ_ENG_MDP_FG3) |	\
				 (1LL << CMDQ_ENG_MDP_VPP0_SOUT) |	\
				 (1LL << CMDQ_ENG_MDP_VPP1_SOUT) |	\
				 (1LL << CMDQ_ENG_MDP_HDR0) |	\
				 (1LL << CMDQ_ENG_MDP_HDR2) |   \
				 (1LL << CMDQ_ENG_MDP_HDR3) |   \
				 (1LL << CMDQ_ENG_MDP_AAL0) |	\
				 (1LL << CMDQ_ENG_MDP_AAL2) |	\
				 (1LL << CMDQ_ENG_MDP_AAL3) |	\
				 (1LL << CMDQ_ENG_MDP_RSZ0) |	\
				 (1LL << CMDQ_ENG_MDP_RSZ2) |	\
				 (1LL << CMDQ_ENG_MDP_RSZ3) |	\
				 (1LL << CMDQ_ENG_MDP_TDSHP0) |	\
				 (1LL << CMDQ_ENG_MDP_TDSHP2) |	\
				 (1LL << CMDQ_ENG_MDP_TDSHP3) |	\
				 (1LL << CMDQ_ENG_MDP_COLOR0) |	\
				 (1LL << CMDQ_ENG_MDP_COLOR2) |	\
				 (1LL << CMDQ_ENG_MDP_COLOR3) |	\
				 (1LL << CMDQ_ENG_MDP_OVL0) |	\
				 (1LL << CMDQ_ENG_MDP_PAD0) |	\
				 (1LL << CMDQ_ENG_MDP_PAD2) |	\
				 (1LL << CMDQ_ENG_MDP_PAD3) |	\
				 (1LL << CMDQ_ENG_MDP_WROT0) |	\
				 (1LL << CMDQ_ENG_MDP_WROT2) |	\
				 (1LL << CMDQ_ENG_MDP_WROT3))

#define CMDQ_ENG_DPE_GROUP_BITS		(0LL)
#define CMDQ_ENG_RSC_GROUP_BITS		(0LL)
#define CMDQ_ENG_GEPF_GROUP_BITS	(0LL)
#define CMDQ_ENG_EAF_GROUP_BITS		(0LL)
#define CMDQ_ENG_OWE_GROUP_BITS		(0LL)
#define CMDQ_ENG_MFB_GROUP_BITS		(0LL)
#define CMDQ_ENG_FDVT_GROUP_BITS	(0LL)

#define CMDQ_ENG_ISP_GROUP_FLAG(flag)   ((flag) & (CMDQ_ENG_ISP_GROUP_BITS))
#define CMDQ_ENG_MDP_GROUP_FLAG(flag)   ((flag) & (CMDQ_ENG_MDP_GROUP_BITS))
#define CMDQ_ENG_DPE_GROUP_FLAG(flag)	((flag) & (CMDQ_ENG_DPE_GROUP_BITS))
#define CMDQ_ENG_RSC_GROUP_FLAG(flag)	((flag) & (CMDQ_ENG_RSC_GROUP_BITS))
#define CMDQ_ENG_GEPF_GROUP_FLAG(flag)	((flag) & (CMDQ_ENG_GEPF_GROUP_BITS))
#define CMDQ_ENG_WPE_GROUP_FLAG(flag)	((flag) & (CMDQ_ENG_WPE_GROUP_BITS))
#define CMDQ_ENG_EAF_GROUP_FLAG(flag)	((flag) & (CMDQ_ENG_EAF_GROUP_BITS))
#define CMDQ_ENG_OWE_GROUP_FLAG(flag)	((flag) & (CMDQ_ENG_OWE_GROUP_BITS))
#define CMDQ_ENG_MFB_GROUP_FLAG(flag)	((flag) & (CMDQ_ENG_MFB_GROUP_BITS))
#define CMDQ_ENG_FDVT_GROUP_FLAG(flag)	((flag) & (CMDQ_ENG_FDVT_GROUP_BITS))

#define CMDQ_FOREACH_GROUP(ACTION_struct)\
	ACTION_struct(CMDQ_GROUP_ISP, ISP)	\
	ACTION_struct(CMDQ_GROUP_MDP, MDP)	\
	ACTION_struct(CMDQ_GROUP_DPE, DPE)	\
	ACTION_struct(CMDQ_GROUP_RSC, RSC)	\
	ACTION_struct(CMDQ_GROUP_GEPF, GEPF)	\
	ACTION_struct(CMDQ_GROUP_WPE, WPE)	\
	ACTION_struct(CMDQ_GROUP_EAF, EAF)	\
	ACTION_struct(CMDQ_GROUP_OWE, OWE)	\
	ACTION_struct(CMDQ_GROUP_MFB, MFB)	\
	ACTION_struct(CMDQ_GROUP_FDVT, FDVT)

#define MDP_GENERATE_ENUM(_enum, _string) _enum,

enum CMDQ_GROUP_ENUM {
	CMDQ_FOREACH_GROUP(MDP_GENERATE_ENUM)
	CMDQ_MAX_GROUP_COUNT,	/* ALWAYS keep at the end */
};

enum MDP_ENG_BASE {
	ENGBASE_MMSYS_CONFIG = 0,
	ENGBASE_MMSYS2_CONFIG,
	ENGBASE_MDP_RDMA0,
	ENGBASE_MDP_RDMA2,
	ENGBASE_MDP_RDMA3,
	ENGBASE_MDP_FG0,
	ENGBASE_MDP_FG2,
	ENGBASE_MDP_FG3,
	ENGBASE_MDP_HDR0,
	ENGBASE_MDP_HDR2,
	ENGBASE_MDP_HDR3,
	ENGBASE_MDP_AAL0,
	ENGBASE_MDP_AAL2,
	ENGBASE_MDP_AAL3,
	ENGBASE_MDP_RSZ0,
	ENGBASE_MDP_RSZ2,
	ENGBASE_MDP_RSZ3,
	ENGBASE_MDP_TDSHP0,
	ENGBASE_MDP_TDSHP2,
	ENGBASE_MDP_TDSHP3,
	ENGBASE_MDP_MERGE2,
	ENGBASE_MDP_MERGE3,
	ENGBASE_MDP_COLOR0,
	ENGBASE_MDP_COLOR2,
	ENGBASE_MDP_COLOR3,
	ENGBASE_MDP_OVL0,
	ENGBASE_MDP_PAD0,
	ENGBASE_MDP_PAD2,
	ENGBASE_MDP_PAD3,
	ENGBASE_MDP_TCC0,
	ENGBASE_MDP_WROT0,
	ENGBASE_MDP_WROT2,
	ENGBASE_MDP_WROT3,
	ENGBASE_MMSYS_MUTEX,
	ENGBASE_MMSYS_MUTEX2,
	ENGBASE_VPP_WPE_A,
	ENGBASE_COUNT
};
#endif				/* __MDP_ENGINE_H__ */
